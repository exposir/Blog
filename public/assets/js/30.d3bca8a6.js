(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{430:function(t,e,a){"use strict";a.r(e);var s=a(56),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("https://zh.javascript.info/fetch-crossorigin")])]),t._v(" "),a("li",[a("p",[t._v("http://www.ruanyifeng.com/blog/2016/04/cors.html")])]),t._v(" "),a("li",[a("p",[t._v("域名、端口、协议")])])]),t._v(" "),a("blockquote",[a("p",[t._v("同源策略是指在 Web 浏览器中，允许某个网页脚本访问另一个网页的数据，但前提是这两个网页必须有相同的 URI、主机名和端口号，一旦两个网站满足上述条件，这两个网站就被认定为具有相同来源。此策略可防止某个网页上的恶意脚本通过该页面的文档对象模型访问另一网页上的敏感数据。")]),t._v(" "),a("p",[t._v("同源策略对 Web 应用程序具有特殊意义，因为 Web 应用程序广泛依赖于 HTTP cookie[1]来维持用户会话，所以必须将不相关网站严格分隔，以防止丢失数据泄露。")]),t._v(" "),a("p",[t._v("值得注意的是同源策略仅适用于脚本，这意味着某网站可以通过相应的 HTML 标签[2]访问不同来源网站上的图像、CSS 和动态加载脚本等资源。而跨站请求伪造就是利用同源策略不适用于 HTML 标签的缺陷。\nwiki")])]),t._v(" "),a("h3",{attrs:{id:"阻止了哪些交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻止了哪些交互"}},[t._v("#")]),t._v(" 阻止了哪些交互？")]),t._v(" "),a("ul",[a("li",[t._v("无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB，即无法跨域去获取另一页面下的缓存数据；")]),t._v(" "),a("li",[t._v("无法操作非同源网页的 DOM（iframe）")]),t._v(" "),a("li",[t._v("无法向非同源地址发送 AJAX 请求；此点也是最关键最重要的一点，通常我们关注的也是如何通过请求跨域获取数据")])]),t._v(" "),a("h2",{attrs:{id:"不常用跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不常用跨域"}},[t._v("#")]),t._v(" 不常用跨域")]),t._v(" "),a("ul",[a("li",[t._v("form 提交到 iframe")]),t._v(" "),a("li",[t._v("使用 script 标签，即 JSONP (JSON with padding)")]),t._v(" "),a("li",[t._v("postMessage")])]),t._v(" "),a("h2",{attrs:{id:"cors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),a("ul",[a("li",[t._v("即跨源资源共享（Cross-Origin Resource Sharing）。")])]),t._v(" "),a("h3",{attrs:{id:"两种请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种请求"}},[t._v("#")]),t._v(" 两种请求")]),t._v(" "),a("p",[t._v("只要同时满足以下两大条件，就属于简单请求。")]),t._v(" "),a("ol",[a("li",[t._v("请求方法是以下三种方法之一：")])]),t._v(" "),a("ul",[a("li",[t._v("HEAD")]),t._v(" "),a("li",[t._v("GET")]),t._v(" "),a("li",[t._v("POST")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("HTTP 的头信息不超出以下几种字段：")])]),t._v(" "),a("ul",[a("li",[t._v("Accept")]),t._v(" "),a("li",[t._v("Accept-Language")]),t._v(" "),a("li",[t._v("Content-Language")]),t._v(" "),a("li",[t._v("Last-Event-ID")]),t._v(" "),a("li",[t._v("Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain")])]),t._v(" "),a("p",[t._v("这是为了兼容表单（form），因为历史上表单一直可以发出跨域请求。AJAX 的跨域设计就是，只要表单可以发，AJAX 就可以直接发。")]),t._v(" "),a("p",[t._v("凡是不同时满足上面两个条件，就属于非简单请求。")]),t._v(" "),a("p",[t._v("浏览器对这两种请求的处理，是不一样的。")]),t._v(" "),a("h3",{attrs:{id:"简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[t._v("#")]),t._v(" 简单请求")]),t._v(" "),a("h4",{attrs:{id:"基本流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本流程"}},[t._v("#")]),t._v(" 基本流程")]),t._v(" "),a("p",[t._v("对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是在头信息之中，增加一个 Origin 字段。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n")])])]),a("p",[t._v("上面的头信息中，Origin 字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。")]),t._v(" "),a("p",[t._v("如果 Origin 指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含 Access-Control-Allow-Origin 字段（详见下文），就知道出错了，从而抛出一个错误，被 XMLHttpRequest 的 onerror 回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200。")]),t._v(" "),a("p",[t._v("如果 Origin 指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Access-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html; charset=utf-8\n")])])]),a("ol",[a("li",[a("p",[t._v("Access-Control-Allow-Origin\n该字段是必须的。它的值要么是请求时 Origin 字段的值，要么是一个*，表示接受任意域名的请求。")])]),t._v(" "),a("li",[a("p",[t._v("Access-Control-Allow-Credentials\n该字段可选。它的值是一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为 true，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为 true，如果服务器不要浏览器发送 Cookie，删除该字段即可。")])]),t._v(" "),a("li",[a("p",[t._v("Access-Control-Expose-Headers\n该字段可选。CORS 请求时，XMLHttpRequest 对象的 getResponseHeader()方法只能拿到 6 个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在 Access-Control-Expose-Headers 里面指定。上面的例子指定，getResponseHeader('FooBar')可以返回 FooBar 字段的值。")])])]),t._v(" "),a("h4",{attrs:{id:"withcredentials-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#withcredentials-属性"}},[t._v("#")]),t._v(" withCredentials 属性")]),t._v(" "),a("p",[t._v("上面说到，CORS 请求默认不发送 Cookie 和 HTTP 认证信息。如果要把 Cookie 发到服务器，一方面要服务器同意，指定"),a("code",[t._v("Access-Control-Allow-Credentials")]),t._v("字段。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Access-Control-Allow-Credentials: true\n")])])]),a("p",[t._v("另一方面，开发者必须在 AJAX 请求中打开 withCredentials 属性。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n")])])]),a("p",[t._v("否则，即使服务器同意发送 Cookie，浏览器也不会发送。或者，服务器要求设置 Cookie，浏览器也不会处理。")]),t._v(" "),a("p",[t._v("但是，如果省略 withCredentials 设置，有的浏览器还是会一起发送 Cookie。这时，可以显式关闭 withCredentials。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("xhr.withCredentials = false;\n")])])]),a("p",[t._v("需要注意的是，如果要发送 Cookie，"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie 依然遵循同源政策，只有用服务器域名设置的 Cookie 才会上传，其他域名的 Cookie 并不会上传，且（跨源）原网页代码中的"),a("code",[t._v("document.cookie")]),t._v("也无法读取服务器域名下的 Cookie。")]),t._v(" "),a("h3",{attrs:{id:"非简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非简单请求"}},[t._v("#")]),t._v(" 非简单请求")]),t._v(" "),a("h4",{attrs:{id:"预检请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预检请求"}},[t._v("#")]),t._v(" 预检请求")]),t._v(" "),a("p",[t._v("非简单请求是那种对服务器有特殊要求的请求，比如请求方法是"),a("code",[t._v("PUT")]),t._v("或"),a("code",[t._v("DELETE")]),t._v("，或者"),a("code",[t._v("Content-Type")]),t._v("字段的类型是 application/json。")]),t._v(" "),a("p",[t._v('非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为"预检"请求（preflight）。')]),t._v(" "),a("p",[t._v("浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的"),a("code",[t._v("XMLHttpRequest请")]),t._v("求，否则就报错。")]),t._v(" "),a("p",[t._v("下面是一段浏览器的 JavaScript 脚本。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://api.alice.com/cors"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PUT"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRequestHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"X-Custom-Header"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("上面代码中，HTTP 请求的方法是"),a("code",[t._v("PUT")]),t._v("，并且发送一个自定义头信息"),a("code",[t._v("X-Custom-Header")]),t._v("。")]),t._v(" "),a("p",[t._v('浏览器发现，这是一个非简单请求，就自动发出一个"预检"请求，要求服务器确认可以这样请求。下面是这个"预检"请求的 HTTP 头信息。')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("OPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n")])])]),a("p",[t._v('"预检"请求用的请求方法是'),a("code",[t._v("OPTIONS")]),t._v("，表示这个请求是用来询问的。头信息里面，关键字段是"),a("code",[t._v("Origin")]),t._v("，表示请求来自哪个源。")]),t._v(" "),a("p",[t._v("除了"),a("code",[t._v("Origin")]),t._v('字段，"预检"请求的头信息包括两个特殊字段。')]),t._v(" "),a("ol",[a("li",[t._v("Access-Control-Request-Method")])]),t._v(" "),a("p",[t._v("该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是 PUT。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("Access-Control-Request-Headers")])]),t._v(" "),a("p",[t._v('该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是 X-Custom-Header。\n除了 Origin 字段，"预检"请求的头信息包括两个特殊字段。')]),t._v(" "),a("h4",{attrs:{id:"预检请求的回应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预检请求的回应"}},[t._v("#")]),t._v(" 预检请求的回应")]),t._v(" "),a("p",[t._v('服务器收到"预检"请求以后，检查了'),a("code",[t._v("Origin")]),t._v("、"),a("code",[t._v("Access-Control-Request-Method")]),t._v("和"),a("code",[t._v("Access-Control-Request-Headers")]),t._v("字段以后，确认允许跨源请求，就可以做出回应。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("HTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain\n")])])]),a("p",[t._v("上面的 HTTP 回应中，关键的是"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("字段，表示"),a("code",[t._v("http://api.bob.com")]),t._v("可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Access-Control-Allow-Origin: *\n")])])]),a("p",[t._v('如果服务器否定了"预检"请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被 XMLHttpRequest 对象的 onerror 回调函数捕获。控制台会打印出如下的报错信息。')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("XMLHttpRequest cannot load http://api.alice.com.\nOrigin http://api.bob.com is not allowed by Access-Control-Allow-Origin.\n")])])]),a("p",[t._v("服务器回应的其他 CORS 相关字段如下。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Access-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nAccess-Control-Allow-Credentials: true\nAccess-Control-Max-Age: 1728000\n")])])]),a("ol",[a("li",[a("p",[t._v('Access-Control-Allow-Methods\n该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次"预检"请求。')])]),t._v(" "),a("li",[a("p",[t._v("Access-Control-Allow-Headers\n如果浏览器请求包括"),a("code",[t._v("Access-Control-Request-Headers")]),t._v("字段，则"),a("code",[t._v("Access-Control-Allow-Headers")]),t._v('字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在"预检"中请求的字段。')])]),t._v(" "),a("li",[a("p",[t._v("Access-Control-Allow-Credentials\n该字段与简单请求时的含义相同。")])]),t._v(" "),a("li",[a("p",[t._v("Access-Control-Max-Age\n该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是 20 天（1728000 秒），即允许缓存该条回应 1728000 秒（即 20 天），在此期间，不用发出另一条预检请求。")])])]),t._v(" "),a("h4",{attrs:{id:"浏览器的正常请求和回应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的正常请求和回应"}},[t._v("#")]),t._v(" 浏览器的正常请求和回应")]),t._v(" "),a("p",[t._v('一旦服务器通过了"预检"请求，以后每次浏览器正常的'),a("code",[t._v("CORS")]),t._v("请求，就都跟简单请求一样，会有一个 Origin 头信息字段。服务器的回应，也都会有一个"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("头信息字段。")]),t._v(" "),a("p",[t._v('下面是"预检"请求之后，浏览器的正常 CORS 请求。')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("PUT /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nX-Custom-Header: value\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n")])])]),a("p",[t._v("上面头信息的"),a("code",[t._v("Origin")]),t._v("字段是浏览器自动添加的。")]),t._v(" "),a("p",[t._v("下面是服务器正常的回应。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Access-Control-Allow-Origin: http://api.bob.com\nContent-Type: text/html; charset=utf-8\n")])])]),a("p",[t._v("上面头信息中，"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("字段是每次回应都必定包含的。")]),t._v(" "),a("h3",{attrs:{id:"与-jsonp-的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与-jsonp-的比较"}},[t._v("#")]),t._v(" 与 JSONP 的比较")]),t._v(" "),a("p",[t._v("CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。")]),t._v(" "),a("p",[t._v("JSONP 只支持"),a("code",[t._v("GET")]),t._v("请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。")]),t._v(" "),a("h2",{attrs:{id:"开发环境跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发环境跨域"}},[t._v("#")]),t._v(" 开发环境跨域")]),t._v(" "),a("h3",{attrs:{id:"webpack-dev-server-代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-server-代理"}},[t._v("#")]),t._v(" webpack-dev-server 代理")]),t._v(" "),a("p",[t._v("当我们在"),a("code",[t._v("http://co.com")]),t._v("的页面上直接调用"),a("code",[t._v("http://api.co.com")]),t._v("的接口时，会出现跨域问题。")]),t._v(" "),a("p",[t._v("我们可以将所有的接口请求都从"),a("code",[t._v("http://co.com")]),t._v("发出，如"),a("code",[t._v("http://co.com/api/getSomeData")]),t._v("(额外加了/api，方便统一转发)，最后通过"),a("code",[t._v("proxy")]),t._v("配置代理，转发到最终的接口服务器"),a("code",[t._v("http://api.co.com/getSomeData")]),t._v("。")]),t._v(" "),a("p",[t._v("proxy 配置如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("devServer: {\n  proxy: {\n    '/api': {\n      target: 'http://api.co.com',\n      // 如果转发后的pathname需要改变，可以通过以下方式重写\n      // 下面是把api前缀去掉\n      pathRewrite: {\n        '^/api/': '',\n      },\n    },\n  }\n}\n")])])]),a("h3",{attrs:{id:"nginx-代理转发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-代理转发"}},[t._v("#")]),t._v(" Nginx 代理转发")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location /api {\n  proxy_redirect off;\n  proxy_set_header Host $host;\n  proxy_set_header X-Real-IP $remote_addr;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_set_header X-NginX-Proxy true;\n  # 转发时重写地址\n  rewrite ^/api/(.*)$ /$1 break;\n  # 转发目的地\n  proxy_pass http://api.co.com;\n}\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);