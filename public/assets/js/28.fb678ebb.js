(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{428:function(e,t,a){"use strict";a.r(t);var i=a(56),s=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/33340988/110444879-7e0da400-80f8-11eb-892b-21939267303e.png",alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("Cache-Control > expires > Etag > Last-Modified")])]),e._v(" "),a("h2",{attrs:{id:"强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[e._v("#")]),e._v(" 强缓存")]),e._v(" "),a("h3",{attrs:{id:"expires"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[e._v("#")]),e._v(" Expires")]),e._v(" "),a("ul",[a("li",[e._v("Expires 是 HTTP/1.0 控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于 Expires 的值时，直接使用缓存结果。")])]),e._v(" "),a("h3",{attrs:{id:"cache-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[e._v("#")]),e._v(" Cache-Control")]),e._v(" "),a("p",[e._v("在 HTTP/1.1 中，Cache-Control 是最重要的规则，主要用于控制网页缓存，主要取值为：")]),e._v(" "),a("ul",[a("li",[e._v("public：所有内容都将被缓存（客户端和代理服务器都可缓存）")]),e._v(" "),a("li",[e._v("private：所有内容只有客户端可以缓存，Cache-Control 的默认取值")]),e._v(" "),a("li",[e._v("no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定")]),e._v(" "),a("li",[e._v("no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存")]),e._v(" "),a("li",[e._v("max-age=xxx (xxx is numeric)：缓存内容将在 xxx 秒后失效")])]),e._v(" "),a("h3",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[e._v("#")]),e._v(" 区别")]),e._v(" "),a("ul",[a("li",[e._v("HTTP 响应报文中 expires 的时间值，是一个绝对值")]),e._v(" "),a("li",[e._v("HTTP 响应报文中 Cache-Control 为 max-age=600，是相对值")]),e._v(" "),a("li",[e._v("在无法确定客户端的时间是否与服务端的时间同步的情况下，Cache-Control 相比于 expires 是更好的选择，所以同时存在时，只有 Cache-Control 生效。")])]),e._v(" "),a("h2",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[e._v("#")]),e._v(" 协商缓存")]),e._v(" "),a("p",[e._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：")]),e._v(" "),a("ol",[a("li",[e._v("协商缓存生效，返回 304")]),e._v(" "),a("li",[e._v("协商缓存失效，返回 200 和请求结果结果")])]),e._v(" "),a("p",[e._v("同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：")]),e._v(" "),a("ul",[a("li",[e._v("Last-Modified")]),e._v(" "),a("li",[e._v("If-Modified-Since")]),e._v(" "),a("li",[e._v("Etag")]),e._v(" "),a("li",[e._v("If-None-Match")]),e._v(" "),a("li",[e._v("Etag / If-None-Match 优先级高于 Last-Modified / If-Modified-Since，同时存在则只有 Etag / If-None-Match 生效。")])]),e._v(" "),a("h3",{attrs:{id:"last-modified-if-modified-since"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since"}},[e._v("#")]),e._v(" Last-Modified / If-Modified-Since")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Last-Modified")]),e._v("是服务器响应请求时，返回该资源文件在服务器最后被修改的时间")]),e._v(" "),a("li",[a("code",[e._v("If-Modified-Since")]),e._v("则是客户端再次发起该请求时，携带上次请求返回的 Last-Modified 值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有 If-Modified-Since 字段，则会根据 If-Modified-Since 的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于 If-Modified-Since 的字段值，则重新返回资源，状态码为 200；否则则返回 304，代表资源无更新，可继续使用缓存文件，")])]),e._v(" "),a("h3",{attrs:{id:"etag-if-none-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match"}},[e._v("#")]),e._v(" Etag / If-None-Match")]),e._v(" "),a("ul",[a("li",[e._v("Etag 是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)")]),e._v(" "),a("li",[a("code",[e._v("f-None-Match")]),e._v("是客户端再次发起该请求时，携带上次请求返回的唯一标识 Etag 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有 If-None-Match，则会根据 If-None-Match 的字段值与该资源在服务器的 Etag 值做对比，一致则返回 304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 200")])]),e._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("强制缓存优先于协商缓存进行，若强制缓存(Expires 和 Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since 和 Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回 304，继续使用缓存")])])}),[],!1,null,null,null);t.default=s.exports}}]);