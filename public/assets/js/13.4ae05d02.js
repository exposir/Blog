(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{413:function(e,t,a){"use strict";a.r(t);var s=a(56),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[e._v("#")]),e._v(" 描述")]),e._v(" "),a("blockquote",[a("p",[e._v("跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。")]),e._v(" "),a("p",[e._v("跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。")]),e._v(" "),a("p",[e._v("跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了 web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。")])]),e._v(" "),a("h3",{attrs:{id:"令牌同步模式-stp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#令牌同步模式-stp"}},[e._v("#")]),e._v(" 令牌同步模式 STP")]),e._v(" "),a("p",[e._v("令牌同步模式（英语：Synchronizer token pattern，简称 STP）。原理是：当用户发送请求时，服务器端应用将令牌（英语：token，一个保密且唯一的值）嵌入 HTML 表格，并发送给客户端。客户端提交 HTML 表格时候，会将令牌发送到服务端，令牌的验证是由服务端实行的。令牌可以通过任何方式生成，只要确保随机性和唯一性（如：使用随机种子【英语：random seed】的哈希链 ）。这样确保攻击者发送请求时候，由于没有该令牌而无法通过验证。")]),e._v(" "),a("p",[e._v("STP 能在 HTML 下运作顺利，但会导致服务端的复杂度升高，复杂度源于令牌的生成和验证。因为令牌是唯一且随机，如果每个表格都使用一个唯一的令牌，那么当页面过多时，服务器由于生产令牌而导致的负担也会增加。而使用会话（英语：session）等级的令牌代替的话，服务器的负担将没有那么重。")]),e._v(" "),a("h3",{attrs:{id:"检查-referer-字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查-referer-字段"}},[e._v("#")]),e._v(" 检查 Referer 字段")]),e._v(" "),a("p",[e._v("HTTP 头中有一个"),a("code",[e._v("Referer")]),e._v("字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer 字段应和请求的地址位于同一域名下。以上文银行操作为例，Referer 字段地址通常应该是转账按钮所在的网页地址，应该也位于 bank.example.com 之下。而如果是 CSRF 攻击传来的请求，Referer 字段会是包含恶意网址的地址，不会位于 bank.example.com 之下，这时候服务器就能识别出恶意的访问。")]),e._v(" "),a("p",[e._v("这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的 Referer 字段。虽然 http 协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其 Referer 字段的可能。")]),e._v(" "),a("h3",{attrs:{id:"添加校验-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加校验-token"}},[e._v("#")]),e._v(" 添加校验 token")]),e._v(" "),a("p",[e._v("由于 CSRF 的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在 cookie 中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再运行 CSRF 攻击。这种数据通常是窗体中的一个数据项。服务器将其生成并附加在窗体中，其内容是一个伪随机数。当客户端通过窗体提交请求时，这个伪随机数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪随机数，而通过 CSRF 传来的欺骗性攻击中，攻击者无从事先得知这个伪随机数的值，服务端就会因为校验 token 的值为空或者错误，拒绝这个可疑请求。")]),e._v(" "),a("h3",{attrs:{id:"same-site"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#same-site"}},[e._v("#")]),e._v(" same-site")]),e._v(" "),a("p",[e._v("Cookie 的 "),a("code",[e._v("SameSite")]),e._v(" 属性用来限制第三方 Cookie，从而减少安全风险。")]),e._v(" "),a("p",[e._v("它可以设置三个值。")]),e._v(" "),a("ul",[a("li",[e._v("Strict")]),e._v(" "),a("li",[e._v("Lax")]),e._v(" "),a("li",[e._v("None")])]),e._v(" "),a("h4",{attrs:{id:"strict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strict"}},[e._v("#")]),e._v(" Strict")]),e._v(" "),a("p",[e._v("Strict 最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: CookieName=CookieValue; SameSite=Strict;\n")])])]),a("p",[e._v("这个规则过于严格，可能造成非常不好的用户体验。比如，当前网页有一个 GitHub 链接，用户点击跳转就不会带有 GitHub 的 Cookie，跳转过去总是未登陆状态。")]),e._v(" "),a("h4",{attrs:{id:"lax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lax"}},[e._v("#")]),e._v(" Lax")]),e._v(" "),a("p",[a("code",[e._v("Lax")]),e._v(" 规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: CookieName=CookieValue; SameSite=Lax;\n")])])]),a("p",[e._v("导航到目标网址的 GET 请求，只包括三种情况：链接，预加载请求，GET 表单。")]),e._v(" "),a("p",[e._v("设置了"),a("code",[e._v("Strict")]),e._v("或"),a("code",[e._v("Lax")]),e._v("以后，基本就杜绝了 CSRF 攻击。当然，前提是用户浏览器支持 SameSite 属性。")]),e._v(" "),a("h4",{attrs:{id:"none"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[e._v("#")]),e._v(" None")]),e._v(" "),a("p",[e._v("Chrome 计划将"),a("code",[e._v("Lax")]),e._v("变为默认设置。这时，网站可以选择显式关闭 SameSite 属性，将其设为 None。不过，前提是必须同时设置 Secure 属性（Cookie 只能通过 HTTPS 协议发送），否则无效。")]),e._v(" "),a("p",[e._v("下面的设置无效。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: widget_session=abc123; SameSite=None\n")])])]),a("p",[e._v("下面的设置有效。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: widget_session=abc123; SameSite=None; Secure\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);